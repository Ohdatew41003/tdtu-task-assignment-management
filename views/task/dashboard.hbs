<!-- views/dashboard.hbs -->
<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Dashboard Công Việc</title>
    <link rel="stylesheet" href="/css/style.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f8f9fa;
            margin: 0;
            padding: 0;
        }

        header {
            background-color: #007bff;
            color: white;
            padding: 20px;
            text-align: center;
        }

        header h1 {
            margin: 0;
            font-size: 24px;
        }

        nav ul {
            list-style: none;
            padding: 0;
            text-align: center;
            margin: 15px 0 0 0;
        }

        nav ul li {
            display: inline-block;
            margin: 0 10px;
        }

        nav ul li a,
        nav ul li form button {
            color: white;
            text-decoration: none;
            font-size: 16px;
            padding: 10px 15px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        nav ul li a {
            background-color: #0056b3;
        }

        nav ul li a:hover {
            background-color: #003366;
        }

        nav ul li form button {
            background-color: #dc3545;
        }

        nav ul li form button:hover {
            background-color: #c82333;
        }

        .container {
            padding: 30px;
            max-width: 900px;
            margin: auto;
        }

        .task-dashboard h2 {
            color: #333;
            margin-bottom: 20px;
            text-align: center;
        }

        .task {
            background: white;
            border: 1px solid #dee2e6;
            border-left: 5px solid #0d6efd;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .task h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .status {
            font-weight: bold;
            text-transform: uppercase;
        }

        .status.IN_PROGRESS {
            color: orange;
        }

        .status.COMPLETED {
            color: green;
        }

        .status.PENDING {
            color: gray;
        }

        .progress-bar {
            background-color: #e9ecef;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 5px;
            height: 10px;
        }

        .progress-bar-inner {
            height: 100%;
            background-color: #0d6efd;
            transition: width 0.3s ease;
        }

        p {
            margin: 5px 0;
        }

        /* CSS cho nút "Cập nhật & Upload tài liệu" */
        .btn-update-progress {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 14px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s ease;
            margin-top: 10px;
            display: inline-block;
        }

        .btn-update-progress:hover {
            background-color: #0056b3;
        }

        /* CSS cho modal overlay */
        #modalOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 999;
        }

        /* CSS cho popup modal */
        #updateProgressModal {
            display: none;
            position: fixed;
            top: 10%;
            left: 50%;
            transform: translateX(-50%);
            width: 400px;
            background: #fff;
            border-radius: 8px;
            padding: 20px 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            font-family: Arial, sans-serif;
        }

        /* Tiêu đề modal */
        #updateProgressModal h3 {
            margin-top: 0;
            margin-bottom: 15px;
            font-weight: 600;
            color: #333;
            text-align: center;
        }

        /* Form trong modal */
        #updateProgressModal form label {
            display: block;
            margin-bottom: 12px;
            font-size: 14px;
            color: #555;
        }

        /* Input và textarea */
        #updateProgressModal input[type="number"],
        #updateProgressModal textarea,
        #updateProgressModal input[type="file"] {
            width: 100%;
            padding: 8px 10px;
            border: 1.5px solid #ccc;
            border-radius: 5px;
            font-size: 14px;
            box-sizing: border-box;
            resize: vertical;
            font-family: Arial, sans-serif;
        }

        #updateProgressModal textarea {
            height: 60px;
        }

        /* Nút lưu cập nhật */
        #updateProgressModal button[type="submit"] {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 18px;
            border-radius: 5px;
            font-size: 15px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-right: 10px;
        }

        #updateProgressModal button[type="submit"]:hover {
            background-color: #218838;
        }

        /* Nút đóng modal */
        #updateProgressModal button#closeModal {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 10px 18px;
            border-radius: 5px;
            font-size: 15px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #updateProgressModal button#closeModal:hover {
            background-color: #c82333;
        }

        /* Responsive cho modal khi màn hình nhỏ */
        @media (max-width: 450px) {
            #updateProgressModal {
                width: 90%;
                padding: 15px 20px;
            }
        }

        .notif-btn {
            position: relative;
            padding: 10px 20px;
            background-color: #8cc326;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .notif-badge {
            position: absolute;
            top: 5px;
            right: 5px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: gray;
            /* mặc định không có tin mới */
            transition: background-color 0.3s;
        }

        .notif-badge.has-unread {
            background-color: rgb(24, 138, 14);
            /* có thông báo mới thì vàng */
        }

        .hidden {
            display: none;
        }

        .notif-list {
            position: absolute;
            top: 40px;
            right: 10px;
            width: 300px;
            max-height: 400px;
            overflow: auto;
            background: white;
            border: 1px solid #ccc;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            z-index: 1000;
        }

        .notif-item.unread {
            font-weight: bold;
        }

        .notif-list.hidden {
            display: none;
        }

        .notif-btn {
            cursor: pointer;
            position: relative;
        }

        .notif-badge.has-unread {
            background: red;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            position: absolute;
            top: 0;
            right: 0;
        }
    </style>
</head>

<body>



    <div id="updateProgressModal"
        style="display:none; position:fixed; top:10%; left:50%; transform:translateX(-50%); background:#fff; padding:20px; border:1px solid #ccc; z-index:1000;">
        <h3>Cập nhật tiến độ công việc</h3>
        <form id="updateProgressForm">
            <input type="hidden" name="progressId" id="progressId" />
            <label>Tiến độ (%): <input type="number" name="progressPercentage" id="progressPercentage" min="0" max="100"
                    required /></label><br />
            <label>Vấn đề (nếu có): <textarea name="issues" id="issues"></textarea></label><br />
            <label>Tải lên tài liệu: <input type="file" name="attachment" id="attachment" /></label><br />
            <button type="submit">Lưu cập nhật</button>
            <button type="button" id="closeModal">Đóng</button>
        </form>
    </div>
    <div id="modalOverlay"
        style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:999;">
    </div>



    <header>
        <h1>Dashboard Công Việc</h1>
        <nav>
            <ul>
                <li><a href="/api/admin/index">Trang Admin</a></li>
                <li><a href="/api/users/user">Quản lý người dùng</a></li>

                <li><a href="/api/tasks/task">Quản lý đầu việc</a></li>
                <li><a href="/api/tasks/dashboard">Quản lý công việc</a></li>
                <li><a href="/api/tasks/evalution">Đánh giá</a></li>
                <li><a href="/api/extensionRequest/extensionRequest">Gia hạn</a></li>
                <li>
                    <form action="/api/auth/logout" method="POST">
                        <button type="submit">Đăng Xuất</button>
                    </form>
                </li>
            </ul>
        </nav>
    </header>

    <div class="container">

        <button id="notifBtn" class="notif-btn">
            Thông báo <span id="notifBadge" class="notif-badge"></span>
        </button>


        <div id="notifList" class="notif-list hidden"></div>
        <section class="task-dashboard">
            <h2>Danh Sách Tiến Độ Công Việc</h2>

            <!-- Phần render dữ liệu tĩnh lúc server render -->
            {{#each taskProgressList}}
            <div class="task">
                <h3>Công việc ID: {{taskId}}</h3>
                <p><strong>Người báo cáo:</strong> {{reportedById}}</p>
                <p><strong>Mô tả:</strong> {{description}}</p>
                <p><strong>Trạng thái:</strong>
                    {{#if (eq progressPercentage 100)}}
                    <span class="status COMPLETED">COMPLETED</span>
                    {{else if (gt progressPercentage 0)}}
                    <span class="status IN_PROGRESS">IN_PROGRESS</span>
                    {{else}}
                    <span class="status PENDING">PENDING</span>
                    {{/if}}
                </p>
                <p><strong>Tiến độ:</strong> {{progressPercentage}}%</p>
                <div class="progress-bar">
                    <div class="progress-bar-inner"
                        style="width: {{progressPercentage}}%; background-color: {{#if (eq progressPercentage 100)}}green{{else}}#007bff{{/if}};">
                    </div>
                </div>
                <p><strong>Ngày báo cáo:</strong> {{formatDate reportDate}}</p>
                {{#if issues}}
                <p><strong>Vấn đề:</strong> {{issues}}</p>
                {{/if}}
                {{#if attachment}}
                <p><strong>File đính kèm:</strong>
                    <a href="{{attachment.url}}" target="_blank" download>{{attachment.filename}}</a>
                </p>
                {{/if}}

            </div>
            {{/each}}

        </section>
    </div>

    <script>
        let users = [];
        let tasks = [];
        let taskProcess = [];
        let documents = [];

        // Khi trang tải xong


        // Gọi API để load tất cả dữ liệu
        async function loadAllData() {
            try {
                const [tasksRes, usersRes, documentsRes] = await Promise.all([
                    fetch('/api/tasks/get'),
                    fetch('/api/users/get'),
                    fetch('/api/documents/get')
                ]);

                if (!tasksRes.ok || !usersRes.ok || !documentsRes.ok) {
                    throw new Error('Lỗi khi tải dữ liệu');
                }

                tasks = await tasksRes.json();
                users = await usersRes.json();
                documents = await documentsRes.json();

                if (!Array.isArray(tasks) || !Array.isArray(users) || !Array.isArray(documents)) {
                    throw new Error('Dữ liệu không đúng định dạng');
                }

                await loadTaskProgress();
            } catch (error) {
                console.error('Lỗi:', error);
            }
        }

        // Load tiến độ công việc
        async function loadTaskProgress() {
            try {
                const response = await fetch('/api/taskProgress/get');
                if (!response.ok) {
                    throw new Error('Lỗi khi tải dữ liệu tiến độ công việc');
                }
                const jsonData = await response.json();
                taskProcess = Array.isArray(jsonData) ? jsonData : jsonData.data;

                if (!Array.isArray(taskProcess)) {
                    throw new Error('Dữ liệu tiến độ không phải là mảng');
                }

                renderTaskProgress(taskProcess);
            } catch (error) {
                console.error('Lỗi:', error);
            }
        }

        // Hiển thị danh sách tiến độ
        function renderTaskProgress(tasksProgress) {
            const container = document.querySelector('.task-dashboard');
            if (!container) {
                console.error('Không tìm thấy phần tử chứa tiến độ công việc (.task-dashboard)');
                return;
            }

            container.innerHTML = '<h2>Danh Sách Tiến Độ Công Việc</h2>';

            tasksProgress.forEach(taskProgress => {
                const task = tasks.find(t => t.taskId === taskProgress.taskId);
                const taskTitle = task ? task.title : `Công việc ID: ${taskProgress.taskId}`;
                const user = users.find(u => u.userId === taskProgress.reportedById);
                const fullName = user ? user.fullName : `Người báo cáo ID: ${taskProgress.reportedById}`;

                const statusClass = taskProgress.progressPercentage === 100
                    ? 'COMPLETED'
                    : (taskProgress.progressPercentage > 0 ? 'IN_PROGRESS' : 'PENDING');

                const reportDate = new Date(taskProgress.reportDate);
                const formattedDate = isNaN(reportDate.getTime()) ? '' : reportDate.toLocaleDateString('vi-VN');

                let fileAttachmentHTML = '';
                if (typeof taskProgress.attachment === 'string' && taskProgress.attachment.trim() !== '') {
                    const documentObj = documents.find(doc => doc.documentId === taskProgress.attachment);
                    if (documentObj) {
                        fileAttachmentHTML = `
                        <p><strong>File đính kèm:</strong>
                            <a href="/api/taskProgress/${taskProgress.progressId}/download" target="_blank" download>${documentObj.title}</a>
                        </p>
                    `;
                    } else {
                        fileAttachmentHTML = `<p><strong>File đính kèm:</strong> Không tìm thấy document</p>`;
                    }
                }

                const taskHTML = `
                <div class="task" data-progressid="${taskProgress.progressId}">
                    <h3>${taskTitle}</h3>
                    <p><strong>Người báo cáo:</strong> ${fullName}</p>
                    <p><strong>Mô tả:</strong> ${taskProgress.description}</p>
                    <p><strong>Trạng thái:</strong> <span class="status ${statusClass}">${statusClass}</span></p>
                    <p><strong>Tiến độ:</strong> ${taskProgress.progressPercentage}%</p>
                    <div class="progress-bar">
                        <div class="progress-bar-inner" style="width: ${taskProgress.progressPercentage}%; background-color: ${taskProgress.progressPercentage === 100 ? 'green' : '#007bff'};"></div>
                    </div>
                    <p><strong>Ngày báo cáo:</strong> ${formattedDate}</p>
                    ${taskProgress.issues ? `<p><strong>Vấn đề:</strong> ${taskProgress.issues}</p>` : ''}
                    ${fileAttachmentHTML}
                    <button class="btn-update-progress">Cập nhật & Upload tài liệu</button>
                </div>
            `;

                container.innerHTML += taskHTML;
            });
        }

        // Render công việc và tên người làm
        function renderTaskAndUser(tasks, users) {
            const container = document.getElementById('task-list');
            if (!container) {
                console.error('Không tìm thấy phần tử chứa danh sách công việc (id="task-list")');
                return;
            }

            container.innerHTML = '';
            tasks.forEach(task => {
                const user = users.find(u => u.id === task.userId);
                const userName = user ? user.name : 'Không rõ người làm';
                const item = document.createElement('div');
                item.textContent = `Công việc: ${task.title} - Người làm: ${userName}`;
                container.appendChild(item);
            });
        }

        // Xử lý click cập nhật tiến độ
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('btn-update-progress')) {
                const taskDiv = e.target.closest('.task');
                const progressId = taskDiv.getAttribute('data-progressid');
                const taskProgress = taskProcess.find(tp => tp.progressId === progressId);
                if (!taskProgress) return alert('Không tìm thấy tiến độ công việc');

                document.getElementById('progressId').value = taskProgress.progressId;
                document.getElementById('progressPercentage').value = taskProgress.progressPercentage || 0;
                document.getElementById('issues').value = taskProgress.issues || '';
                document.getElementById('attachment').value = '';

                document.getElementById('updateProgressModal').style.display = 'block';
                document.getElementById('modalOverlay').style.display = 'block';
            }

            if (e.target.id === 'closeModal') {
                document.getElementById('updateProgressModal').style.display = 'none';
                document.getElementById('modalOverlay').style.display = 'none';
            }
        });

        // Submit cập nhật tiến độ
        document.getElementById('updateProgressForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            const progressId = formData.get('progressId');

            if (!progressId) {
                alert('Thiếu progressId để cập nhật');
                return;
            }

            try {
                const response = await fetch(`/api/taskProgress/update/${progressId}`, {
                    method: 'PUT',
                    body: formData
                });

                if (!response.ok) throw new Error('Cập nhật tiến độ thất bại');

                const result = await response.json();
                if (result.success) {
                    alert('Cập nhật tiến độ thành công');
                    document.getElementById('updateProgressModal').style.display = 'none';
                    document.getElementById('modalOverlay').style.display = 'none';
                    await loadTaskProgress();
                } else {
                    alert('Lỗi: ' + (result.message || 'Không rõ'));
                }
            } catch (error) {
                alert(error.message);
            }
        });

        // ====== Notification ======
        const btn = document.getElementById('notifBtn');
        const badge = document.getElementById('notifBadge');
        const list = document.getElementById('notifList');

        async function loadNotifs() {
            const res = await fetch('/api/notifications/get');
            return res.json();
        }

        async function updateBadge() {
            const notifs = await loadNotifs();
            const hasUnread = notifs.some(n => !n.isRead);
            badge.classList.toggle('has-unread', hasUnread);
        }

        async function renderList() {
            const notifs = await loadNotifs();
            list.innerHTML = '';
            notifs.forEach(n => {
                const div = document.createElement('div');
                div.className = 'notif-item' + (n.isRead ? '' : ' unread');

                // Hiển thị nội dung, tiêu đề liên quan và thời gian
                div.innerHTML = `
            <strong>${n.relatedTitle || 'Thông báo hệ thống'}</strong><br>
            ${n.content}<br>
            <small>${new Date(n.createdAt).toLocaleString()}</small>
        `;

                div.onclick = async () => {
                    if (!n.isRead) {
                        await fetch('/api/notifications/mark-read', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ notificationId: n.notificationId })
                        });
                        n.isRead = true;
                        div.classList.remove('unread');
                        updateBadge();
                    }
                };
                list.appendChild(div);
            });
        }


        btn.addEventListener('click', async () => {
            list.classList.toggle('hidden');
            await renderList();
        });
        window.addEventListener('DOMContentLoaded', () => {
            loadAllData();
            updateBadge();
        });
    </script>

</body>

</html>