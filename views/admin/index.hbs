<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý người dùng</title>
    <link rel="stylesheet" href="/css/admin.css">
    <style>
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .tab-buttons button {
            margin-right: 10px;
            padding: 10px 15px;
            cursor: pointer;
        }

        .tab-buttons .active {
            background-color: #007bff;
            color: white;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            /* căn giữa ngang */
            align-items: center;
            /* căn giữa dọc */
            z-index: 9999;
        }

        #editUserForm {
            background: white;
            padding: 20px 30px;
            border-radius: 10px;
            width: 400px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        #editUserForm label {
            font-weight: 600;
            color: #333;
        }

        #editUserForm input,
        #editUserForm select {
            padding: 8px 10px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 14px;
        }

        #editUserForm button {
            padding: 10px 15px;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
        }

        #editUserForm button[type="submit"] {
            background-color: #007bff;
            color: white;
        }

        #editUserForm button[type="button"] {
            background-color: #6c757d;
            color: white;
        }

        #editUserForm button:hover {
            opacity: 0.9;
        }

        .hidden {
            display: none;
        }

        /* Đặt font chữ chung */


        /* Container form */
        #createForm {
            background-color: #fff;
            padding: 20px 30px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
            max-width: 600px;
            margin: auto;
        }

        /* Các fieldset có khoảng cách */
        fieldset {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px 20px;
            margin-bottom: 20px;
        }

        /* Tiêu đề fieldset */
        legend {
            font-weight: bold;
            padding: 0 10px;
            color: #555;
        }

        /* Label hiển thị block, cách input */
        label {
            display: block;
            margin-top: 10px;
            font-weight: 600;
            color: #444;
        }

        /* Input, select */
        input[type="text"],
        input[type="email"],
        input[type="password"],
        select,
        textarea {
            width: 100%;
            padding: 8px 10px;
            margin-top: 4px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        /* Khi focus */
        input[type="text"]:focus,
        input[type="email"]:focus,
        input[type="password"]:focus,
        select:focus,
        textarea:focus {
            border-color: #007bff;
            outline: none;
        }

        /* Chọn multiple select */
        select[multiple] {
            height: 120px;
        }

        /* Nút bấm */
        button[type="submit"] {
            background-color: #007bff;
            color: white;
            font-weight: bold;
            border: none;
            padding: 12px 25px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            margin-top: 10px;
            display: block;
            width: 100%;
        }

        /* Hover nút */
        button[type="submit"]:hover {
            background-color: #0056b3;
        }
    </style>
</head>

<body>
    <header>
        <h1>Xin chào, {{user.fullName}}!</h1>
        <nav>
            <ul>
                <li><a href="/api/admin/index">Trang Admin</a></li>
                <li><a href="/api/users/user">Quản lý người dùng</a></li>


                <li><a href="/api/tasks/task">Quản lý đầu việc</a></li>
                <li><a href="/api/tasks/dashboard">Quản lý công việc</a></li>
                <li><a href="/api/tasks/evalution">Đánh giá</a></li>
                <li><a href="/api/extensionRequest/extensionRequest">Gia hạn</a></li>

                <li>
                    <form action="/api/auth/logout" method="POST">
                        <button type="submit">Đăng Xuất</button>
                    </form>
                </li>
            </ul>
        </nav>
    </header>
    <main>
        <h2>Trang Phân Quyền</h2>

        <!-- only render the permissions section when user.username is 'admin' -->
        {{#eq user.username "admin"}}
        <label for="roleSelect">Chọn vai trò:</label>
        <select id="roleSelect"></select>

        <fieldset>
            <legend>Danh sách chức năng:</legend>
            <div id="functionsList"></div>
        </fieldset>
        {{else}}
        <p>Bạn không có quyền truy cập phần Phân quyền.</p>
        {{/eq}}

    </main>

    <script>
        async function fetchRoles() {
            const res = await fetch('/api/rolePermissions/roles');
            return res.json();
        }

        async function fetchFunctions() {
            const res = await fetch('/api/rolePermissions/functions');
            return res.json();
        }

        async function fetchRolePermissions(roleId) {
            const res = await fetch(`/api/rolePermissions/role-permission/${roleId}`);
            return res.json();
        }

        async function addPermission(roleId, functionId) {
            await fetch('/api/rolePermissions/role-permission', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ roleId, functionId })
            });
        }

        async function removePermission(roleId, functionId) {
            await fetch('/api/rolePermissions/role-permission', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ roleId, functionId })
            });
        }

        async function init() {
            const roleSelect = document.getElementById('roleSelect');
            const functionsList = document.getElementById('functionsList');

            const roles = await fetchRoles();
            const functions = await fetchFunctions();

            // Populate select role dropdown
            roles.forEach(role => {
                const option = document.createElement('option');
                option.value = role.roleId;
                option.textContent = role.roleName;
                roleSelect.appendChild(option);
            });

            async function loadPermissions() {
                functionsList.innerHTML = '';
                const roleId = roleSelect.value;
                const currentPermissions = await fetchRolePermissions(roleId);

                functions.forEach(func => {
                    const label = document.createElement('label');
                    label.style.display = 'block'; // cho xuống dòng từng checkbox

                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.value = func.functionId;
                    checkbox.checked = currentPermissions.includes(func.functionId);

                    checkbox.addEventListener('change', async () => {
                        if (checkbox.checked) {
                            await addPermission(roleId, func.functionId);
                        } else {
                            await removePermission(roleId, func.functionId);
                        }
                    });

                    label.appendChild(checkbox);
                    label.append(` ${func.functionName}`);
                    functionsList.appendChild(label);
                });
            }

            roleSelect.addEventListener('change', loadPermissions);
            await loadPermissions();
        }

        init();
    </script>